name: release
on:
  workflow_dispatch:
  push:
    branches:
      #- main
      - test-plugin
  #schedule:
    #- cron: "0 0 1 * *"
jobs:
  release:
    permissions: write-all
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v3
        with:
          node-version: "22"
      - name: Install dependencies
        run: npm ci
      - name: Check if there have been changes to the wiki
        id: wiki_confirm_no_changes
        continue-on-error: true
        run: |
          if [ "$RUNNER_DEBUG" = "1" ]; then
            exit 1
          else
            npm run wiki-check-changed $(git tag -l --sort=-v:refname)
          fi
      - name: Install zip
        if: ${{ steps.wiki_confirm_no_changes.outcome == 'failure' }}
        uses: montudor/action-zip@v1
      - name: Scrape wiki
        if: ${{ steps.wiki_confirm_no_changes.outcome == 'failure' }}
        run: npm run scrape-wiki
      - name: Format the output with StyLua
        if: ${{ steps.wiki_confirm_no_changes.outcome == 'failure' }}
        uses: JohnnyMorganz/stylua-action@v2.0.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          version: latest
          args: --no-editorconfig output/
      - name: Pack release
        if: ${{ steps.wiki_confirm_no_changes.outcome == 'failure' }}
        run: npm run pack-release
      - name: Get release files and version
        if: ${{ steps.wiki_confirm_no_changes.outcome == 'failure' }}
        id: release_json
        run: |
          content=`cat ./dist/release/release.json`
          # the following lines are only required for multi line json
          content="${content//'%'/'%25'}"
          content="${content//$'\n'/'%0A'}"
          content="${content//$'\r'/'%0D'}"
          # end of optional handling for multi line json
          echo "releaseJson<<EOF" >> $GITHUB_OUTPUT
          echo "${content}" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create plugin asset
        if: ${{ steps.wiki_confirm_no_changes.outcome == 'failure' }}
        id: create_plugin_asset
        run: |
          mkdir -p dist/release
          # get existing releaseFiles from release.json (comma separated)
          releaseFiles=$(node -e "const r=require('./dist/release/release.json'); console.log((r.releaseFiles||[]).join(','))")
          plugin_file=""
          if [ -d dist/libraries/garrysmod ]; then
            version="${{ fromJson(steps.release_json.outputs.releaseJson).version }}"
            plugin_file="dist/release/${version}.plugin.zip"
            (cd dist/libraries/garrysmod && zip -r ../../release/${version}.plugin.zip .)
          fi

          if [ -n "$plugin_file" ] && [ -f "$plugin_file" ]; then
            if [ -z "$releaseFiles" ]; then
              combined="$plugin_file"
            else
              combined="$releaseFiles,$plugin_file"
            fi
          else
            combined="$releaseFiles"
          fi

          echo "releaseArtifacts=${combined}" >> $GITHUB_OUTPUT

      - name: Create release
        if: ${{ steps.wiki_confirm_no_changes.outcome == 'failure' }}
        id: create_release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: ${{ fromJson(steps.release_json.outputs.releaseJson).version }}
          tag: ${{ fromJson(steps.release_json.outputs.releaseJson).version }}
          prerelease: ${{ github.ref_name == 'test' }}
          body: |
            # 📅 ${{ fromJson(steps.release_json.outputs.releaseJson).version }}
            This release was automatically generated by [this GitHub Action Workflow](${{ github.server_url }}/${{ github.repository }}/blob/${{ github.ref_name }}/.github/workflows/release.yml).

            ## 📝 Attached Archives
            With this release the following archives are attached:
            - `*.lua.zip`: Annotations for Lua definitions to include in your workspace (e.g: for EmmyLua)
            - `*.json.zip`: JSON definitions based on the Wiki contents (can be used for further processing)
            - `*.plugin.zip`: Plugin archive containing the library files for this release (packaged from the lua-language-server-addon branch contents).

          artifacts: ${{ steps.create_plugin_asset.outputs.releaseArtifacts }}
      - name: Publish Lua Language Server Library
        if: ${{ steps.wiki_confirm_no_changes.outcome == 'failure' }}
        run: npm run publish-library
      - name: Copy library to it's own branch
        if: ${{ steps.wiki_confirm_no_changes.outcome == 'failure' }}
        env:
          LIBRARY_PATH: dist/libraries/garrysmod
          TARGET_BRANCH: lua-language-server-addon
        run: |
          libraryPathFirstPart=`echo $LIBRARY_PATH | cut -d'/' -f1`

          git config --global user.name 'GitHub Action'
          git config --global user.email 'action@github.com'

          # Checkout the target branch, create it if it doesn't exist
          git checkout $TARGET_BRANCH 2>/dev/null || git checkout -b $TARGET_BRANCH

          # Remove all files except .git and the library files
          rm -rf $(ls -A | grep -vE ".git$|^$libraryPathFirstPart$")
          mv $LIBRARY_PATH/* .
          rm -rf $libraryPathFirstPart

          # Commit these changes
          git add -A
          git diff-index --quiet HEAD || git commit -am "🚀 Update ${{ fromJson(steps.release_json.outputs.releaseJson).version }}"

          # Push the branch (no tags)
          git push origin $TARGET_BRANCH

        # NOTE: From here on the workflow repo no longer contains the dist files, nor node_modules (removed when publishing branch)
